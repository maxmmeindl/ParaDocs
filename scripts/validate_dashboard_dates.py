#!/usr/bin/env python3
"""Validate dates present in HTML dashboards against search_index/date_index.json.

Usage:
    python scripts/validate_dashboard_dates.py

Outputs a markdown report to dashboard_date_discrepancies.md listing:
    • HTML file & line number
    • Date string detected
    • Whether date exists in date_index.json
"""

import json
import re
from pathlib import Path
from collections import defaultdict

# -------------------------------------------------------------
# Load date_index.json (must be generated by run_indexing.py)
# -------------------------------------------------------------
index_path = Path('search_index/date_index.json')
if not index_path.exists():
    print('❌ search_index/date_index.json not found. Please run scripts/run_pipeline.py first.')
    exit(1)

with open(index_path, 'r', encoding='utf-8') as f:
    try:
        date_index_data = json.load(f)
    except json.JSONDecodeError:
        print('❌ date_index.json is not valid JSON. Regenerate it.')
        exit(1)

index_dates = {entry['date'] for entry in date_index_data if isinstance(entry, dict) and 'date' in entry}
print(f'Loaded {len(index_dates)} unique dates from date_index.json')

# -------------------------------------------------------------
# Scan HTML files for ISO dates (YYYY-MM-DD)
# -------------------------------------------------------------
html_files = list(Path('.').glob('*.html')) + list(Path('.').rglob('*.html'))
pattern = re.compile(r'\d{4}-\d{2}-\d{2}')

issues = defaultdict(list)

for html_file in html_files:
    try:
        with open(html_file, 'r', encoding='utf-8', errors='ignore') as f:
            for line_no, line in enumerate(f, 1):
                for match in pattern.finditer(line):
                    date_str = match.group(0)
                    if date_str not in index_dates:
                        issues[html_file].append((line_no, date_str))
    except Exception as e:
        print(f'Failed to read {html_file}: {e}')

# -------------------------------------------------------------
# Write markdown report
# -------------------------------------------------------------
report_lines = [
    '# Dashboard Date Discrepancy Report',
    '',
    f'Total HTML files scanned: {len(html_files)}',
    f'Dates in index: {len(index_dates)}',
    f'Files with mismatched dates: {len(issues)}',
    '',
]

for file_path, mismatches in sorted(issues.items()):
    report_lines.append(f'## {file_path}')
    report_lines.append('Line | Date | In Index')
    report_lines.append('---- | ---- | --------')
    for line_no, date_str in mismatches:
        in_idx = '❌'
        report_lines.append(f'{line_no} | {date_str} | {in_idx}')
    report_lines.append('')

out_path = Path('dashboard_date_discrepancies.md')
with open(out_path, 'w', encoding='utf-8') as f:
    f.write('\n'.join(report_lines))

print(f'Report saved to {out_path}') 